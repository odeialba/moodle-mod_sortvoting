{"version":3,"file":"sortvoting.min.js","sources":["../src/sortvoting.js"],"sourcesContent":["// This file is part of the mod_sortvoting plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module used when saving a new sort voting.\n *\n * @module      mod_sortvoting/issues-list\n * @copyright   2023 Odei Alba <odeialba@odeialba.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport SortableList from 'core/sortable_list';\nimport {add as toastAdd} from 'core/toast';\nimport jQuery from 'jquery';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    SAVEVOTE: \"[data-action='savevote']\"\n};\n\n/**\n * Save sort vote.\n * @param {Element} saveSortVoteElement\n */\nconst saveVote = function(saveSortVoteElement) {\n    saveSortVoteElement.setAttribute('disabled', true);\n    var sortvotingid = document.getElementsByName('sortvotingid')[0].value;\n    var options = document.getElementsByName('option[]');\n\n    // Build votes and positions arrays for later processing.\n    var votes = [];\n    var positions = [];\n    options.forEach(function (option) {\n        positions.push(option.value);\n        votes.push({\n            'position': option.value,\n            'optionid': option.getAttribute('data-optionid')\n        });\n    });\n\n    // Check if all elements of the positions array are unique.\n    if (new Set(positions).size !== positions.length) {\n        window.alert(getString('errorduplicatedposition', 'mod_sortvoting'));\n        saveSortVoteElement.removeAttribute('disabled');\n        return;\n    }\n\n    // Save vote.\n    var promises = Ajax.call([\n        {methodname: 'mod_sortvoting_save_vote', args: {sortvotingid: sortvotingid, votes: votes}}\n    ]);\n    promises[0].done(function(result) {\n        if (result.success) {\n            toastAdd(getString('votesuccess', 'mod_sortvoting'), {type: 'success'});\n        } else {\n            toastAdd(getString('voteerror', 'mod_sortvoting'), { type: 'danger' });\n        }\n        if (result.allowupdate) {\n            saveSortVoteElement.removeAttribute('disabled');\n        } else {\n            saveSortVoteElement.style.display = 'none';\n            jQuery('ul#sortvotinglist > li.optionitem').each(function (index, element) {\n                element.classList.remove('optionitem', 'draggable');\n                element.removeAttribute('draggable');\n                element.removeAttribute('data-drag-type');\n            });\n        }\n    }).fail(Notification.exception);\n};\n\n/**\n * Sets up sortable list in the column sort order page.\n */\nconst setupSortableLists = () => {\n    new SortableList('#sortvotinglist', {\n        moveHandlerSelector: '.optionitem',\n    });\n    // Listen to the events when element is dragged.\n    jQuery('ul#sortvotinglist > *').on(SortableList.EVENTS.DROP, function (evt, info) {\n        if (info.positionChanged) {\n            // Get the ul element and loop into the li elements.\n            var list = info.sourceList[0];\n            var lis = list.getElementsByTagName('li');\n            for (var i = 0; i < lis.length; i++) {\n                // Set the value of the input to the position of the li element.\n                lis[i].getElementsByTagName('input')[0].value = i + 1;\n            }\n        }\n    });\n};\n\n/**\n * Init page\n */\nexport function init() {\n    setupSortableLists();\n    document.addEventListener('click', event => {\n\n        // Save sort vote.\n        const saveSortVoteElement = event.target.closest(SELECTORS.SAVEVOTE);\n        if (saveSortVoteElement) {\n            event.preventDefault();\n            saveVote(saveSortVoteElement);\n        }\n    });\n}\n"],"names":["SortableList","moveHandlerSelector","on","EVENTS","DROP","evt","info","positionChanged","lis","sourceList","getElementsByTagName","i","length","value","document","addEventListener","event","saveSortVoteElement","target","closest","SELECTORS","preventDefault","setAttribute","sortvotingid","getElementsByName","options","votes","positions","forEach","option","push","getAttribute","Set","size","window","alert","removeAttribute","Ajax","call","methodname","args","done","result","success","type","allowupdate","style","display","each","index","element","classList","remove","fail","Notification","exception","saveVote"],"mappings":";;;;;;;0FAwFQA,uBAAa,kBAAmB,CAChCC,oBAAqB,oCAGlB,yBAAyBC,GAAGF,uBAAaG,OAAOC,MAAM,SAAUC,IAAKC,SACpEA,KAAKC,wBAGDC,IADOF,KAAKG,WAAW,GACZC,qBAAqB,MAC3BC,EAAI,EAAGA,EAAIH,IAAII,OAAQD,IAE5BH,IAAIG,GAAGD,qBAAqB,SAAS,GAAGG,MAAQF,EAAI,KAWhEG,SAASC,iBAAiB,SAASC,cAGzBC,oBAAsBD,MAAME,OAAOC,QAAQC,oBAC7CH,sBACAD,MAAMK,iBA7ED,SAASJ,qBACtBA,oBAAoBK,aAAa,YAAY,OACzCC,aAAeT,SAASU,kBAAkB,gBAAgB,GAAGX,MAC7DY,QAAUX,SAASU,kBAAkB,YAGrCE,MAAQ,GACRC,UAAY,MAChBF,QAAQG,SAAQ,SAAUC,QACtBF,UAAUG,KAAKD,OAAOhB,OACtBa,MAAMI,KAAK,UACKD,OAAOhB,eACPgB,OAAOE,aAAa,sBAKpC,IAAIC,IAAIL,WAAWM,OAASN,UAAUf,cACtCsB,OAAOC,OAAM,mBAAU,0BAA2B,wBAClDlB,oBAAoBmB,gBAAgB,YAKzBC,cAAKC,KAAK,CACrB,CAACC,WAAY,2BAA4BC,KAAM,CAACjB,aAAcA,aAAcG,MAAOA,UAE9E,GAAGe,MAAK,SAASC,QAClBA,OAAOC,wBACE,mBAAU,cAAe,kBAAmB,CAACC,KAAM,4BAEnD,mBAAU,YAAa,kBAAmB,CAAEA,KAAM,WAE3DF,OAAOG,YACP5B,oBAAoBmB,gBAAgB,aAEpCnB,oBAAoB6B,MAAMC,QAAU,2BAC7B,qCAAqCC,MAAK,SAAUC,MAAOC,SAC9DA,QAAQC,UAAUC,OAAO,aAAc,aACvCF,QAAQd,gBAAgB,aACxBc,QAAQd,gBAAgB,yBAGjCiB,KAAKC,sBAAaC,WAmCbC,CAASvC,sNAtFfG,mBACQ"}